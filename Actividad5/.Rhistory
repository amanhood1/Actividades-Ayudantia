install.packages("datasauRus")
install.packages("proxy")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(readr)
library(qdap)
data <- read.csv(file='C:/Users/amanh/Downloads',sep=";")
library(tidyverse)
library(readr)
library(qdap)
install.packages("qdap")
library(tidyverse)
library(readr)
library(qdap)
data <- read.csv(file='C:/Users/amanh/Downloads/sanguchez.csv',sep=";")
data <- subset(data, select = -c(texto, url, Local, Direccion, Precio))
head(data)
summary(data)
View(data)
data <- data[complete.cases(data), ]
data <- filter(data, nota==5)
head(data)
View(data)
ing_text <- data$Ingredientes
ing_source <- VectorSource(ing_text)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(utf8)
library(ggplot2)
library(stringr)
setwd("C:/Users/amanh/Downloads")
datos <- read.csv("sanguchez.csv",header= TRUE, sep=";")
head(datos)
str(datos)
summary(datos)
dim(datos)
sandw <- datos[,! (colnames(datos) %in% c("url","Local","Direccion","texto", "Precio"))]
datos
sandw <- filter(sandw, nota == 5)
summary(sandw)
dim(sandw)
sandw <- filter(sandw, nota == 5)
summary(sandw)
dim(sandw)
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi[3]
sanwi[4]
sani2 <- VectorSource(sanwi)
install.packages("qdap")
library(qdap)
detach("package:qdap", unload = TRUE)
library(qdap)
system("java - version")
library(devtools)
install.packages("openNLPdata")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(qdap)
install.packages("openNLPdata")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
setwd("C:/Users/amanh/Downloads")
datos <- read.csv("sanguchez.csv",header= TRUE, sep=";")
library(openNLPdata)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
setwd("C:/Users/amanh/Downloads")
datos <- read.csv("sanguchez.csv",header= TRUE, sep=";")
sani2 <- VectorSource(sanwi)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(qdap)
knitr::opts_chunk$set(echo = TRUE)
sanwi <- sandw$Ingredientes
sanwi[1]
datos <- tolower(datos)
sanwi[3]
sanwi[4]
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi <- tolower(sanwi)
sanwi[3]
sanwi[4]
install.packages("tm")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(tm)
setwd("C:/Users/amanh/Downloads")
datos <- read.csv("sanguchez.csv",header= TRUE, sep=";")
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi <- tolower(sanwi)
sanwi <- removePunctuation(sanwi)
sanwi[3]
sanwi[4]
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi <- tolower(sanwi)
sanwi <- removePunctuation(sanwi)
sanwi <- removeNumbers(sanwi)
sanwi[3]
sanwi[4]
View(sandw)
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi <- tolower(sanwi)
sanwi <- removePunctuation(sanwi)
sanwi <- removeNumbers(sanwi)
sanwi[3]
sanwi[4]
sanwi <- sandw$Ingredientes
sanwi[1]
sanwi <- tolower(sanwi)
sanwi <- removePunctuation(sanwi)
sanwi <- removeNumbers(sanwi)
sanwi[1]
sanwi[4]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readr)
library(stringr)
library(readr)
library(datasets)
library(cluster)
library(factoextra)
install.packages("factoextra")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readr)
library(stringr)
library(readr)
library(datasets)
library(cluster)
library(factoextra)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad5")
datos  <- read.csv("sanguchez.csv",sep=";")
head(datos)
datos <- datos[,! (colnames(datos) %in% c("url","Local","Direccion","Ingredientes","texto"))]
datos <- na.omit(datos)
head(datos)
datos$Precio <- as.numeric(gsub('[$.]', '', datos$Precio))
head(datos)
datos <- datos[complete.cases(datos), ]
summary(datos)
pre=boxplot(datos$Precio, horizontal =TRUE)
stats_pre = boxplot.stats(datos$precio)
pre
stats_pre
datos<-filter(datos, Precio <10500 & Precio > 1550)
boxplot(datos$Precio, horizontal = TRUE)
View(stats_pre)
View(stats_pre)
datos<-filter(datos, Precio <10500 & Precio > 2000)
boxplot(datos$Precio, horizontal = TRUE)
pre=boxplot(datos$Precio, horizontal =TRUE)
stats_pre = boxplot.stats(datos$precio)
pre
stats_pre
pre=boxplot(datos$Precio, horizontal =TRUE)
stats_pre = boxplot.stats(datos$precio)
pre
stats_pre
datos <- datos[complete.cases(datos), ]
summary(datos)
pre=boxplot(datos$Precio, horizontal =TRUE)
stats_pre = boxplot.stats(datos$precio)
pre
stats_pre
not=boxplot(datos$nota, horizontal =TRUE)
stats_not = boxplot.stats(datos$nota)
not
stats_not
not=boxplot(datos$nota, horizontal =TRUE)
stats_not = boxplot.stats(datos$nota)
not
stats_not
not=boxplot(datos$nota, horizontal =TRUE)
stats_not = boxplot.stats(datos$nota)
not
stats_not
datos<-filter(datos, nota>1)
boxplot(datos$nota, horizontal = TRUE)
escala_d  = scale(datos)%>%as_tibble ()
escala_d %>% summary()
View(escala_d)
escala_d  = scale(datos)%>%as_tibble ()
escala_d %>% summary()
modelo_kmeans <- kmeans(escala_d, centers = 10)
modelo_kmeans2 <- kmeans(datos, centers = 10)
escala_d$clus <- modelo_kmeans$cluster %>% as.factor()
datos$clus <- modelo_kmeans2$cluster %>% as.factor()
ggplot(escala_d, aes(Precio, nota, color=clus)) +
geom_point(alpha=0.5, show.legend = T) +
theme_bw()
SSinterior <- numeric(30)
for(k in 1:30){
modelo <- kmeans(escala_d, centers = k)
SSinterior[k] <- modelo$tot.withinss
}
plot(SSinterior)
SSinterior <- numeric(30)
for(k in 1:30){
modelo <- kmeans(escala_d, centers = k)
SSinterior[k] <- modelo$tot.withinss
}
plot(SSinterior)
escala_d$clus <- as.numeric(escala_d$clus)
datos$clus <- as.numeric(datos$clus)
# uso distancia euclidiana
tempDist <- dist(escala_d) %>% as.matrix()
#reordeno filas y columnas en base al cluster obtenido
index <- sort(modelo_kmeans$cluster, index.return=TRUE)
tempDist <- tempDist[index$ix,index$ix]
rownames(tempDist) <- c(1:nrow(escala_d))
colnames(tempDist) <- c(1:nrow(escala_d))
image(tempDist)
coefSil <- silhouette(modelo_kmeans$cluster,dist(escala_d))
summary(coefSil)
fviz_silhouette(coefSil)+coord_flip()
SSinterior <- numeric(30)
for(k in 1:30){
modelo <- kmeans(escala_d, centers = k)
SSinterior[k] <- modelo$tot.withinss
}
plot(SSinterior)
coefSil=numeric(30)
for (k in 2:30){
modelo <- kmeans(escala_d, centers = k)
temp <- silhouette(modelo$cluster,dist(escala_d))
coefSil[k] <- mean(temp[,3])
}
tempDF=data.frame(CS=coefSil,K=c(1:30))
ggplot(tempDF, aes(x=K, y=CS)) +
geom_line() +
scale_x_continuous(breaks=c(1:30))
escala_d$clus <- as.numeric(escala_d$clus)
datos$clus <- as.numeric(datos$clus)
# uso distancia euclidiana
tempDist <- dist(escala_d) %>% as.matrix()
#reordeno filas y columnas en base al cluster obtenido
index <- sort(modelo_kmeans$cluster, index.return=TRUE)
tempDist <- tempDist[index$ix,index$ix]
rownames(tempDist) <- c(1:nrow(escala_d))
colnames(tempDist) <- c(1:nrow(escala_d))
image(tempDist)
res <- get_clust_tendency(escala_d$clus, n = 30, graph = FALSE)
escala_d$clus <- as.numeric(escala_d$clus)
datos$clus <- as.numeric(datos$clus)
# uso distancia euclidiana
tempDist <- dist(escala_d) %>% as.matrix()
#reordeno filas y columnas en base al cluster obtenido
index <- sort(modelo_kmeans$cluster, index.return=TRUE)
tempDist <- tempDist[index$ix,index$ix]
rownames(tempDist) <- c(1:nrow(escala_d))
colnames(tempDist) <- c(1:nrow(escala_d))
image(tempDist)
res <- get_clust_tendency(escala_d$clus, n = 30, graph = FALSE)
res <- get_clust_tendency(escala_d, n = 30, graph = FALSE)
res2 <- get_clust_tendency(datos, n = 30, graph = FALSE)
print(res)
print(res2)
#Correlation
#construyo matriz de correlacion ideal (cada entidad correlaciona 1 con su cluster)
tempMatrix <- matrix(0, nrow = nrow(escala_d), ncol = nrow(escala_d))
tempMatrix[which(index$x==1), which(index$x==1)]  <- 1
tempMatrix[which(index$x==2), which(index$x==2)]  <- 1
tempMatrix[which(index$x==3), which(index$x==3)]  <- 1
tempMatrix[which(index$x==4), which(index$x==4)]  <- 1
tempMatrix[which(index$x==5), which(index$x==5)]  <- 1
tempMatrix[which(index$x==6), which(index$x==6)]  <- 1
tempMatrix[which(index$x==7), which(index$x==7)]  <- 1
tempMatrix[which(index$x==8), which(index$x==8)]  <- 1
tempMatrix[which(index$x==9), which(index$x==9)]  <- 1
tempMatrix[which(index$x==10), which(index$x==10)] <- 1
#construyo matriz de disimilitud
tempDist2 <- 1/(1+tempDist)
#Calcula correlacion
cor <- cor(tempMatrix[upper.tri(tempMatrix)],tempDist2[upper.tri(tempDist2)])
print(cor)
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
install.packages("flexclust")
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
#escal_data_pok <- apply(escal_data_pok,2,as.numeric)
#Cohesion
withinCluster <- numeric(10)
for (i in 1:10){
tempdata_san <- escal_data_pok[which(modelo_kmeans$cluster == i),]
withinCluster[i] <- sum(dist2(tempdata_san,colMeans(tempdata_san))^2)
}
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
#escal_data_pok <- apply(escal_data_pok,2,as.numeric)
#Cohesion
withinCluster <- numeric(10)
for (i in 1:10){
tempdata_san <- escal_d[which(modelo_kmeans$cluster == i),]
withinCluster[i] <- sum(dist2(tempdata_san,colMeans(tempdata_san))^2)
}
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
#escal_data_pok <- apply(escal_data_pok,2,as.numeric)
#Cohesion
withinCluster <- numeric(10)
for (i in 1:10){
tempdata_san <- escala_d[which(modelo_kmeans$cluster == i),]
withinCluster[i] <- sum(dist2(tempdata_san,colMeans(tempdata_san))^2)
}
cohesion = sum(withinCluster)
#es equivalente a model$tot.withinss en k-means
print(c(cohesion, modelo_kmeans$tot.withinss))
#Separation
meandata_san <- colMeans(escal_d)
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
#escal_data_pok <- apply(escal_data_pok,2,as.numeric)
#Cohesion
withinCluster <- numeric(10)
for (i in 1:10){
tempdata_san <- escala_d[which(modelo_kmeans$cluster == i),]
withinCluster[i] <- sum(dist2(tempdata_san,colMeans(tempdata_san))^2)
}
cohesion = sum(withinCluster)
#es equivalente a model$tot.withinss en k-means
print(c(cohesion, modelo_kmeans$tot.withinss))
#Separation
meandata_san <- colMeans(escala_d)
SSB <- numeric(10)
for (i in 1:10){
tempdata_pok <- escal_data_pok[which(modelo_kmeans$cluster==i),]
SSB[i] <- nrow(tempdata_san)*sum((meandata_san-colMeans(tempdata_san))^2)
}
library(flexclust) # usaremos la distancia implementada en flexclus (dist2) que maneja mejor objetos de diferente tamaño
#escal_data_pok <- apply(escal_data_pok,2,as.numeric)
#Cohesion
withinCluster <- numeric(10)
for (i in 1:10){
tempdata_san <- escala_d[which(modelo_kmeans$cluster == i),]
withinCluster[i] <- sum(dist2(tempdata_san,colMeans(tempdata_san))^2)
}
cohesion = sum(withinCluster)
#es equivalente a model$tot.withinss en k-means
print(c(cohesion, modelo_kmeans$tot.withinss))
#Separation
meandata_san <- colMeans(escala_d)
SSB <- numeric(10)
for (i in 1:10){
tempdata_san <- escala_d[which(modelo_kmeans$cluster==i),]
SSB[i] <- nrow(tempdata_san)*sum((meandata_san-colMeans(tempdata_san))^2)
}
separation = sum(SSB)
print(separation)
coefSil <- silhouette(modelo_kmeans$cluster,dist(escala_d))
summary(coefSil)
fviz_silhouette(coefSil)+coord_flip()
