data_pre$album_release_date <-  as.character(data_pre$album_release_date)
data_pre$album_release_date_precision <- as.character(data_pre$album_release_date_precision)
data_pre$track_id <- as.character(data_pre$track_id)
data_pre$analysis_url <- as.character(data_pre$analysis_url)
data_pre$track_href <- as.character(data_pre$track_href)
data_pre$track_name <- as.character(data_pre$track_name)
data_pre$track_preview_url <- as.character(data_pre$track_preview_url)
data_pre$type <- as.character(data_pre$type)
data_pre$track_uri <- as.character(data_pre$track_uri)
data_pre$external_urls.spotify <- as.character(data_pre$external_urls.spotify)
data_pre$album_name <- as.character(data_pre$album_name)
data_pre$key_name <- as.character(data_pre$key_name)
data_pre$mode_name <- as.character(data_pre$mode_name)
data_pre$key_mode <- as.character(data_pre$key_mode)
data_pre$key <- as.double(as.character(data_pre$key))
data_pre$track_number <- as.double(as.character(data_pre$track_number))
data_pre$time_signature <- as.double(as.character(data_pre$time_signature))
data_pre$disc_number <- as.double(as.character(data_pre$disc_number))
data_pre$duration_ms <- as.double(as.character(data_pre$duration_ms))
data_pre$album_release_year <- as.double(as.character(data_pre$album_release_year))
data_pre$danceability <- as.double(as.character(data_pre$danceability))
data_pre$energy <- as.double(as.character(data_pre$energy))
data_pre$loudness <- as.double(as.character(data_pre$loudness))
data_pre$mode <- as.double(as.character(data_pre$mode))
data_pre$speechiness <- as.double(as.character(data_pre$speechiness))
data_pre$acousticness <- as.double(as.character(data_pre$acousticness))
data_pre$instrumentalness <- as.double(as.character(data_pre$instrumentalness))
data_pre$liveness <- as.double(as.character(data_pre$liveness))
data_pre$valence <- as.double(as.character(data_pre$valence))
data_pre$tempo <- as.double(as.character(data_pre$tempo))
data_pre <- data_pre %>% mutate(duration_min = data_pre$duration_ms/60000)
data_char <- c("artist_name", "artist_id", "album_id", "album_type", "album_release_date",	"album_release_date_precision", "track_id", "analysis_url", "track_href", "track_name", "track_preview_url", "type", "track_uri", "external_urls.spotify", "album_name", "key_name", "mode_name", "key_mode")
data_dou <- c("key", "track_number", "time_signature", "disc_number", "duration_ms", "album_release_year", "danceability", "energy", "loudness", "mode", "speechiness",	"acousticness",	"instrumentalness", "liveness",	"valence", "tempo")
datanum <- data_pre %>%
select(data_dou)
datachar <- data_pre %>%
select(data_char)
data_sca <- sapply(datanum, scale)
d = dist(data_sca, method = "euclidean")
d1 = dist(data_sca, method = "manhattan")
d2 = dist(data_sca, method = "minkowski")
hist(d, main = "Histograma Distancia Euclideana")
hist(d1, main = "Histograma Distancia Manhattan")
hist(d2, main = "Histograma Distancia Minkowski")
# Fijamos una seed para que cada vez que ejecutemos el codigo obtengamos los mismos valores y no vayan cambiado cada vez que ejecutamos el script
set.seed(369)
model_complete <- hclust(d, method = "complete")
summary(model_complete)
set.seed(369)
model_ward <- hclust(d, method = "ward.D")
summary(model_ward)
library("ggdendro")
ggdendrogram(model_complete, rotate = TRUE, theme_dendro = TRUE)
groups <- cutree(model_complete, h = 10)
# Se imprimen los tamaños de cada cluster
table(groups)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion (tanto en data_pre y datanum)
data_pre$clust <- as.factor(groups)
datanum$clust <- as.factor(groups)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = data_sca, cluster = groups))
groups <- cutree(model_complete, h = 9)
# Se imprimen los tamaños de cada cluster
table(groups)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion (tanto en data_pre y datanum)
data_pre$clust <- as.factor(groups)
datanum$clust <- as.factor(groups)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = data_sca, cluster = groups))
datanum$clust <- as.numeric(as.character(datanum$clust))
# Generamos una tabla que almacenara los valores promedios para cada uno de los clusters encontrados lo que nos permitira caracterizar a cada uno de ellos
infoclusters <- aggregate(datanum, by=list(cluster=datanum$clust), mean)
# Borramos la columna clust ya que se repite esa informacion en la tabla generada
infoclusters$clust <- NULL
# Transformamos el tiempo de la cancion a minutos
infoclusters <- infoclusters %>% mutate(duration_min = infoclusters$duration_ms/60000)
# Borramos la columna de la duracion en milisegundoss
infoclusters$duration_ms <- NULL
infoclusters
# 1er Cluster con mas datos
data_c1 <- data_pre %>%
filter(data_pre$clust == 1)
# 2do Cluster con mas datos
data_c2 <- data_pre %>%
filter(data_pre$clust == 4)
# 3er Cluster con mas datos
data_c3 <- data_pre %>%
filter(data_pre$clust == 2)
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 5)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
summary(data_sca)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
#data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
#fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de datanumc2
#datanumc2$clust <- as.factor(groupsc2)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
summary(datanumc2)
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
datanumc2 <- datanumc2 %>%
filter(!(is.na(disc_number)))
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
summary(datanumc2)
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
summary(datanumc2)
summary(data_c2)
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
datanumc2 <- datanumc2 %>%
filter(!(is.na(track_name)))
datanumc2 <- datanumc2 %>%
filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2 %>%
filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
summary(datanumc2)
datanumc2[datanumc2 == ""] <- NA
datanumc2 <- datanumc2 %>%
filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
summary(datanumc2)
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
summary(datanumc2)
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
summary(datanumc2)
View(datanumc2)
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2[,! (colnames(datanumc2) %in% c("disc_number"))]
summary(datanumc2)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de datanumc2
datanumc2$clust <- as.factor(groupsc2)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2[,! (colnames(datanumc2) %in% c("disc_number"))]
summary(datanumc2)
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2[,! (colnames(datanumc2) %in% c("disc_number"))]
summary(datanumc2)
head(datanumc2)
datanumc2$clust <- as.numeric(as.character(datanumc2$clust))
# Generamos una tabla que almacenara los valores promedios para cada uno de los clusters encontrados lo que nos permitira caracterizar a cada uno de ellos
infoclustersc2 <- aggregate(datanumc2, by=list(cluster=datanumc2$clust), mean)
# Borramos la columna clust ya que se repite esa informacion en la tabla generada
infoclustersc2$clust <- NULL
# Transformamos el tiempo de la cancion a minutos
infoclustersc2 <- infoclustersc2 %>% mutate(duration_min = infoclustersc2$duration_ms/60000)
# Borramos la columna de la duracion en milisegundoss
infoclustersc2$duration_ms <- NULL
infoclustersc2
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de datanumc2
datanumc2$clust <- as.factor(groupsc2)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2[,! (colnames(datanumc2) %in% c("disc_number"))]
summary(datanumc2)
head(datanumc2)
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad6")
datos <- read.csv("spotify.csv",header= TRUE, sep=";")
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad6")
datos <- read.csv("spotify.csv",header= TRUE, sep=";")
View(datos)
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad6")
datos <- read.csv("spotify.csv",header= TRUE, sep=" ")
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad6")
datos <- read.csv("spotify.csv",header= TRUE, sep="")
View(datos)
sample_spotify <- datos %>% slice_sample(n=10000)
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
setwd("C:/Users/amanh/OneDrive/Documentos/GitHub/Actividades-Ayudantia/Actividad6")
datos <- read.csv("spotify.csv",header= TRUE, sep="")
sample_spotify <- datos %>% slice_sample(n=10000)
summary(sample_spotify)
head(sample_spotify)
sample_spotify[sample_spotify == ""] <- NA
sample_spotify %>%
summarise_all(funs(sum(is.na(.))))
data_pre <- sample_spotify %>%
filter(!(is.na(track_preview_url)|is.na(album_release_year)))
data_pre %>%
summarise_all(funs(sum(is.na(.))))
data_pre <- data_pre[!duplicated(data_pre$track_id),]
data_pre %>% count(duplicated(data_pre$track_name))
data_pre %>% distinct(track_name, .keep_all = TRUE, )
data_pre$duplicate <- duplicated(data_pre[,c("track_name", "artist_name")])
data_dupli <- data_pre %>%
filter(data_pre$duplicate == TRUE)
data_dupli <- data_dupli %>%
distinct(track_name, artist_name, .keep_all = TRUE)
data_pre <- data_pre[!(data_pre$duplicate == TRUE),]
data_pre <- rbind(data_pre, data_dupli)
data_pre$duplicate <- NULL
summary(data_pre)
head(data_pre)
data_pre$artist_name <- as.character(data_pre$artist_name)
data_pre$artist_id <- as.character(data_pre$artist_id)
data_pre$album_id <- as.character(data_pre$album_id)
data_pre$album_type <- as.character(data_pre$album_type)
data_pre$album_release_date <-  as.character(data_pre$album_release_date)
data_pre$album_release_date_precision <- as.character(data_pre$album_release_date_precision)
data_pre$track_id <- as.character(data_pre$track_id)
data_pre$analysis_url <- as.character(data_pre$analysis_url)
data_pre$track_href <- as.character(data_pre$track_href)
data_pre$track_name <- as.character(data_pre$track_name)
data_pre$track_preview_url <- as.character(data_pre$track_preview_url)
data_pre$type <- as.character(data_pre$type)
data_pre$track_uri <- as.character(data_pre$track_uri)
data_pre$external_urls.spotify <- as.character(data_pre$external_urls.spotify)
data_pre$album_name <- as.character(data_pre$album_name)
data_pre$key_name <- as.character(data_pre$key_name)
data_pre$mode_name <- as.character(data_pre$mode_name)
data_pre$key_mode <- as.character(data_pre$key_mode)
data_pre$key <- as.double(as.character(data_pre$key))
data_pre$track_number <- as.double(as.character(data_pre$track_number))
data_pre$time_signature <- as.double(as.character(data_pre$time_signature))
data_pre$disc_number <- as.double(as.character(data_pre$disc_number))
data_pre$duration_ms <- as.double(as.character(data_pre$duration_ms))
data_pre$album_release_year <- as.double(as.character(data_pre$album_release_year))
data_pre$danceability <- as.double(as.character(data_pre$danceability))
data_pre$energy <- as.double(as.character(data_pre$energy))
data_pre$loudness <- as.double(as.character(data_pre$loudness))
data_pre$mode <- as.double(as.character(data_pre$mode))
data_pre$speechiness <- as.double(as.character(data_pre$speechiness))
data_pre$acousticness <- as.double(as.character(data_pre$acousticness))
data_pre$instrumentalness <- as.double(as.character(data_pre$instrumentalness))
data_pre$liveness <- as.double(as.character(data_pre$liveness))
data_pre$valence <- as.double(as.character(data_pre$valence))
data_pre$tempo <- as.double(as.character(data_pre$tempo))
data_pre <- data_pre %>% mutate(duration_min = data_pre$duration_ms/60000)
data_char <- c("artist_name", "artist_id", "album_id", "album_type", "album_release_date",	"album_release_date_precision", "track_id", "analysis_url", "track_href", "track_name", "track_preview_url", "type", "track_uri", "external_urls.spotify", "album_name", "key_name", "mode_name", "key_mode")
data_dou <- c("key", "track_number", "time_signature", "disc_number", "duration_ms", "album_release_year", "danceability", "energy", "loudness", "mode", "speechiness",	"acousticness",	"instrumentalness", "liveness",	"valence", "tempo")
datanum <- data_pre %>%
select(data_dou)
datachar <- data_pre %>%
select(data_char)
data_sca <- sapply(datanum, scale)
d = dist(data_sca, method = "euclidean")
d1 = dist(data_sca, method = "manhattan")
d2 = dist(data_sca, method = "minkowski")
hist(d, main = "Histograma Distancia Euclideana")
hist(d1, main = "Histograma Distancia Manhattan")
hist(d2, main = "Histograma Distancia Minkowski")
# Fijamos una seed para que cada vez que ejecutemos el codigo obtengamos los mismos valores y no vayan cambiado cada vez que ejecutamos el script
set.seed(369)
model_complete <- hclust(d, method = "complete")
summary(model_complete)
set.seed(369)
model_ward <- hclust(d, method = "ward.D")
summary(model_ward)
library("ggdendro")
ggdendrogram(model_complete, rotate = TRUE, theme_dendro = TRUE)
groups <- cutree(model_complete, h = 9)
# Se imprimen los tamaños de cada cluster
table(groups)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion (tanto en data_pre y datanum)
data_pre$clust <- as.factor(groups)
datanum$clust <- as.factor(groups)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = data_sca, cluster = groups))
datanum$clust <- as.numeric(as.character(datanum$clust))
# Generamos una tabla que almacenara los valores promedios para cada uno de los clusters encontrados lo que nos permitira caracterizar a cada uno de ellos
infoclusters <- aggregate(datanum, by=list(cluster=datanum$clust), mean)
# Borramos la columna clust ya que se repite esa informacion en la tabla generada
infoclusters$clust <- NULL
# Transformamos el tiempo de la cancion a minutos
infoclusters <- infoclusters %>% mutate(duration_min = infoclusters$duration_ms/60000)
# Borramos la columna de la duracion en milisegundoss
infoclusters$duration_ms <- NULL
infoclusters
# 1er Cluster con mas datos
data_c1 <- data_pre %>%
filter(data_pre$clust == 1)
# 2do Cluster con mas datos
data_c2 <- data_pre %>%
filter(data_pre$clust == 4)
# 3er Cluster con mas datos
data_c3 <- data_pre %>%
filter(data_pre$clust == 2)
# Borramos la columna clust para escalar la datanum de c2
data_c2$clust <- NULL
# Selecciono las variables numericas, se escalan las variables y se almacenan los datos en una tabla
datanumc2 <- data_c2 %>%
select(data_dou) %>%
scale() %>%
as_tibble()
# Generamos un modelo divisvo mediante la funcion diana de clusters
modelo_div <- diana(datanumc2)
# Le pedimos el coeficiente de divisivilidad al modelo
modelo_div$dc
# Graficamos nuestro dendrograma divisivo
pltree(modelo_div, cex = 0.8, hang = -1.5, main = "Dendrogram of diana")
#datanumc2[datanumc2 == ""] <- NA
#datanumc2 <- datanumc2 %>%
#filter(!(is.na(disc_number)))
# Corroboramos que no queden datos NA
datanumc2 <- datanumc2[,! (colnames(datanumc2) %in% c("disc_number"))]
# Para el caso divisivo le entregaremos el numero de clusters con los que queremos agrupar nuestros datos
groupsc2 <- cutree(modelo_div, k = 10)
# Se imprimen los tamaños de cada cluster
table(groupsc2)
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de data_c2
data_c2$clust <- as.factor(groupsc2)
# Graficamos las observaciones agrupadas por su cluster
fviz_cluster(list(data = datanumc2, cluster = groupsc2))
# Generamos una nueva columna para almacenar a que cluster pertenece cada observacion de datanumc2
datanumc2$clust <- as.factor(groupsc2)
datanumc2$clust <- as.numeric(as.character(datanumc2$clust))
# Generamos una tabla que almacenara los valores promedios para cada uno de los clusters encontrados lo que nos permitira caracterizar a cada uno de ellos
infoclustersc2 <- aggregate(datanumc2, by=list(cluster=datanumc2$clust), mean)
# Borramos la columna clust ya que se repite esa informacion en la tabla generada
infoclustersc2$clust <- NULL
# Transformamos el tiempo de la cancion a minutos
infoclustersc2 <- infoclustersc2 %>% mutate(duration_min = infoclustersc2$duration_ms/60000)
# Borramos la columna de la duracion en milisegundoss
infoclustersc2$duration_ms <- NULL
infoclustersc2
data_pre %>% distinct(track_name, .keep_all = TRUE, )
data_pre %>% distinct%>%head(track_name, .keep_all = TRUE, )
head(data_pre %>% distinct(track_name, .keep_all = TRUE, ))
data_pre %>% distinct(track_name, .keep_all = TRUE, )%>%head(data_pre)
data_pre %>% distinct(track_name, .keep_all = TRUE, )
summary(sample_spotify)
data_pre %>% distinct(track_name, .keep_all = TRUE, ) %>% head()
